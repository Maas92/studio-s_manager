version: '3.8'

services:
  # PostgreSQL Database (Business Data)
  postgres:
    image: postgres:15-alpine
    container_name: beauty-studio-db
    restart: always
    environment:
      POSTGRES_USER: beautystudio
      POSTGRES_PASSWORD: beautystudio123
      POSTGRES_DB: beautystudio
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - beauty-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U beautystudio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database (Authentication & Users)
  mongodb:
    image: mongo:7-jammy
    container_name: beauty-studio-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: beautystudio
      MONGO_INITDB_ROOT_PASSWORD: beautystudio123
      MONGO_INITDB_DATABASE: beautystudio_auth
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - beauty-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: beauty-studio-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - beauty-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: always
    environment:
      NODE_ENV: development
      PORT: 4000
      AUTH_SERVICE_URL: http://auth-service:4002
      INVENTORY_SERVICE_URL: http://inventory-service:4001
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 90d
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      FRONTEND_URL: http://localhost:3000
    ports:
      - "4000:4000"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
      - /app/dist
    networks:
      - beauty-network

  # Auth Service (MongoDB)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: always
    environment:
      NODE_ENV: development
      PORT: 4002
      MONGODB_URI: mongodb://beautystudio:beautystudio123@mongodb:27017/beautystudio_auth?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 90d
      JWT_COOKIE_EXPIRES_IN: 90
      BCRYPT_ROUNDS: 12
      EMAIL_FROM: noreply@beautystudio.com
    ports:
      - "4002:4002"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules
      - /app/dist
    networks:
      - beauty-network

  # Inventory Service (PostgreSQL)
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    restart: always
    environment:
      NODE_ENV: development
      PORT: 4001
      DATABASE_URL: postgresql://beautystudio:beautystudio123@postgres:5432/beautystudio
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      AUTH_SERVICE_URL: http://auth-service:4002
    ports:
      - "4001:4001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/inventory-service:/app
      - /app/node_modules
      - /app/dist
    networks:
      - beauty-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: beauty-studio-frontend
    restart: always
    environment:
      REACT_APP_API_URL: http://localhost:4000/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - beauty-network
    stdin_open: true
    tty: true

networks:
  beauty-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data: